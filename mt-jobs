#!/usr/bin/env node

// manages jobs

var usage = 'mt jobs';

var {Jobs} = require('./lib/store/jobs');
var {mapToInfo, talk} = require('./lib/utils');

var jobstore = new Jobs();

function listJobs() {
	return jobstore.getAll()
	.then((allJobs) => {
		for(var [jobId, job] of Object.entries(allJobs)) {
			talk(`${Jobs.idToRef(jobId)} (${mapToInfo(job)})`);
		}
		if(!Object.keys(allJobs).length) {
			talk('No active jobs');
		}
	});
}

function stopAll() {
	return jobstore.getAllIds()
	.then(allJobs => {
		return Promise.all(
			allJobs.map(stopJob)
		);
	});
}

function stopJob(jobId) {
	return jobstore.stop(jobId)
	.then(() => talk(`STOPPED ${jobId}`));
}

function main(cmd, ...args) {
	if(!cmd) {
		return listJobs();
	}
	switch(cmd) {
		case 'stop':
			if(args.length === 0 || args[0] === 'all') {
				return stopAll();
			}
			else {
				return jobstore.derefAll(args)
				.then(jobIds => Promise.all(jobIds.map(stopJob)));
			}
			break;
		case undefined:
			return Promise.reject('no command');
		default:
			return Promise.reject(`command ${cmd} not recognised`);
	}
}

if(require.main === module) {
	main(...process.argv.slice(2))
	.then(() => {
		jobstore.close();
	})
	.catch(err => {
		talk.cry(err);
		process.exit(1);
	});
}
